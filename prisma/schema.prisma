generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int            @id @default(autoincrement())
  name      String         @unique
  email     String         @unique
  password  String
  profile   Profile?
  isActive  Boolean        @default(false)
  roles     UserHaveRole[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Profile {
  id        Int      @id @default(autoincrement())
  dob       String?
  bio       String?  @db.VarChar(20)
  gender    Gender?
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id          Int                  @id @default(autoincrement())
  name        String               @unique
  users       UserHaveRole[]
  permissions RoleHavePermission[]
  isActive    Boolean              @default(false)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model Permission {
  id        Int                  @id @default(autoincrement())
  name      String               @unique
  roles     RoleHavePermission[]
  isActive  Boolean              @default(false)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model UserHaveRole {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId Int

  @@id([userId, roleId])
}

model RoleHavePermission {
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId Int

  @@id([roleId, permissionId])
}

enum Gender {
  male
  female
}
