generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int            @id @default(autoincrement())
  name      String         @unique
  email     String         @unique
  password  String
  profile   Profile?
  isActive  Boolean        @default(false)
  roles     UserHaveRole[]
  news      New[]
  token     Token?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Profile {
  id        Int      @id @default(autoincrement())
  dob       String?
  bio       String?  @db.VarChar(20)
  gender    Gender?
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Token {
  id        Int     @id @default(autoincrement())
  userId    Int     @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String?
  expiredAt String?
}

model Role {
  id          Int                  @id @default(autoincrement())
  name        String               @unique
  users       UserHaveRole[]
  permissions RoleHavePermission[]
  isActive    Boolean              @default(false)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model Permission {
  id        Int                  @id @default(autoincrement())
  name      String               @unique
  roles     RoleHavePermission[]
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

model UserHaveRole {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId Int

  @@id([userId, roleId])
}

model RoleHavePermission {
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId Int

  @@id([roleId, permissionId])
}

model Media {
  id        Int       @id @default(autoincrement())
  dirPath   String?
  fileName  String?
  fileType  String?
  fileSize  Int?
  imageURL  String
  serie     Serie?
  category  Category?
  products  Product[]
  new       New?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Serie {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  categories  Category[]
  logoImage   Media      @relation(fields: [logoImageId], references: [id], onDelete: Cascade)
  logoImageId Int        @unique
  colerCode   String?    @default("#000")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Category {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  serie        Serie?   @relation(fields: [serieId], references: [id], onDelete: Cascade)
  serieId      Int      @unique
  coverPhoto   Media    @relation(fields: [coverPhotoId], references: [id], onDelete: Cascade)
  coverPhotoId Int      @unique
  product      Product?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Product {
  id              Int           @id @default(autoincrement())
  name            String        @unique
  category        Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId      Int           @unique
  previewImages   Media         @relation(fields: [previewImageId], references: [id], onDelete: Cascade)
  previewImageId  Int
  specification   Specification @relation(fields: [specificationId], references: [id], onDelete: Cascade)
  specificationId Int           @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Specification {
  id        Int      @id @default(autoincrement())
  name      String
  space     String
  product   Product?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model New {
  id           Int      @id @default(autoincrement())
  title        String
  coverPhoto   Media    @relation(fields: [coverPhotoId], references: [id], onDelete: Cascade)
  coverPhotoId Int      @unique
  content      String   @db.LongText()
  author       User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum Gender {
  male
  female
}
